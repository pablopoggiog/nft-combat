{"version":3,"sources":["contexts/WalletContext.tsx","constants/index.ts","hooks/useContract.ts","theme/index.ts","components/Button/index.ts","components/Toggler/index.tsx","components/Arena/styles.ts","components/Arena/index.tsx","components/SelectCharacter/styles.ts","components/SelectCharacter/index.tsx","components/Spinner/styles.ts","components/Spinner/index.tsx","components/Modal/styles.ts","components/Modal/index.tsx","components/Character/styles.ts","components/Character/index.tsx","assets/squid.jpeg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WalletContext","createContext","WalletContextProvider","children","useState","currentAccount","setCurrentAccount","connectWallet","a","window","ethereum","alert","request","method","accounts","console","log","networkVersion","checkIfWalletIsConnected","useCallback","length","account","useEffect","Provider","value","CONTRACT_ADDRESS","useContract","hasNft","setHasNft","userNft","setNft","characters","setCharacters","isMintingIndex","setIsMintingIndex","isModalOpen","setIsModalOpen","connectedContract","setConnectedContract","useContext","setUpContract","signer","ethers","providers","Web3Provider","getSigner","contract","Contract","contractData","abi","error","checkIfUserhasNft","checkIfUserHasNFT","userNFT","name","getAllCharacters","allCharacters","mintNft","characterIndex","mintNFT","transaction","wait","onMint","sender","tokenId","toNumber","characterNFT","on","off","lightTheme","body","text","toggleBorder","background","darkTheme","Button","styled","button","borderRadius","theme","Toggler","toggleTheme","Container","onClick","div","Arena","Title","h1","CharactersContainer","SelectCharacter","isModal","backgroundImage","p","map","character","isLoading","index","mint","content","isOpen","onClose","spin","keyframes","Loader","inner","innest","Spinner","Background","CloseButton","Content","Modal","CharacterName","CharacterHp","CharacterMaxHp","CharacterAttackDamage","Link","Character","String","imageURI","target","href","hp","maxHp","attackDamage","App","setTheme","ImageContainer","Image","src","image","BodyContainer","img","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5779e6b9.chunk.js","sourcesContent":["import {\r\n  FunctionComponent,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  createContext,\r\n} from \"react\";\r\nimport { WalletContextReturn } from \"src/types\";\r\n\r\nexport const WalletContext = createContext<WalletContextReturn>({} as WalletContextReturn);\r\n\r\nexport const WalletContextProvider: FunctionComponent = ({ children }) => {\r\n  const [currentAccount, setCurrentAccount] = useState<string>(\"\");\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n\r\n      if (window.ethereum.networkVersion !== \"4\")\r\n        alert(\r\n          \"Hey â€” I see you're connected to mainnet but this only works on Rinkeby!\"\r\n        );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const checkIfWalletIsConnected = useCallback(async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n\r\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account);\r\n    } else {\r\n      console.log(\"No authorized account found\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [checkIfWalletIsConnected]);\r\n\r\n  return (\r\n    <WalletContext.Provider value={{ currentAccount, connectWallet }}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n","export const OPENSEA_LINK =\r\n  \"https://testnets.opensea.io/assets/\";\r\nexport const CONTRACT_ADDRESS = \"0x24AFB7cF27AD7F183580e4423AC60Fff454650eB\";","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { ethers, Contract } from \"ethers\";\r\nimport { CONTRACT_ADDRESS } from \"src/constants\";\r\nimport { WalletContext } from \"src/contexts\";\r\nimport { Character, UseContract } from \"src/types\";\r\nimport contractData from \"src/utils/contract.json\";\r\n\r\nexport const useContract: UseContract = () => {\r\n  const [hasNft, setHasNft] = useState<boolean>(false);\r\n  const [userNft, setNft] = useState<Character>();\r\n  const [characters, setCharacters] = useState<Character[]>([]);\r\n  const [isMintingIndex, setIsMintingIndex] = useState<number | null>(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [connectedContract, setConnectedContract] = useState<Contract>();\r\n\r\n  const { currentAccount } = useContext(WalletContext);\r\n\r\n  const setUpContract = useCallback(() => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(\r\n          CONTRACT_ADDRESS,\r\n          contractData.abi,\r\n          signer\r\n        );\r\n\r\n        setConnectedContract(contract);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  const checkIfUserhasNft = useCallback(async () => {\r\n    if (connectedContract) {\r\n      const userNFT: Character = await connectedContract.checkIfUserHasNFT();\r\n      setHasNft(!!userNFT.name);\r\n    }\r\n  }, [connectedContract]);\r\n\r\n  const getAllCharacters = useCallback(async () => {\r\n    if (connectedContract) {\r\n      const allCharacters: Character[] =\r\n        await connectedContract.getAllCharacters();\r\n      setCharacters(allCharacters);\r\n    }\r\n  }, [connectedContract]);\r\n\r\n  const mintNft = useCallback(\r\n    async (characterIndex: number) => {\r\n      if (connectedContract) {\r\n        setIsMintingIndex(characterIndex);\r\n        const transaction = await connectedContract.mintNFT(characterIndex);\r\n\r\n        await transaction.wait();\r\n\r\n        setIsMintingIndex(null);\r\n      }\r\n    },\r\n    [connectedContract]\r\n  );\r\n\r\n  const onMint = useCallback(\r\n    async (sender, tokenId, characterIndex) => {\r\n      console.log(\r\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n      );\r\n\r\n      if (connectedContract) {\r\n        const characterNFT = await connectedContract.checkIfUserHasNFT();\r\n        console.log(\"CharacterNFT: \", characterNFT);\r\n        setHasNft(true);\r\n        setNft({ ...characterNFT, tokenId: tokenId.toNumber() });\r\n        setIsModalOpen(true);\r\n      }\r\n    },\r\n    [connectedContract]\r\n  );\r\n\r\n  useEffect(() => {\r\n    currentAccount && setUpContract();\r\n  }, [currentAccount, setUpContract]);\r\n\r\n  useEffect(() => {\r\n    checkIfUserhasNft();\r\n  }, [checkIfUserhasNft]);\r\n\r\n  useEffect(() => {\r\n    getAllCharacters();\r\n  }, [getAllCharacters]);\r\n\r\n  useEffect(() => {\r\n    connectedContract?.on(\"NFTMinted\", onMint);\r\n\r\n    return () => {\r\n      if (connectedContract) {\r\n        connectedContract.off(\"NFTMinted\", onMint);\r\n      }\r\n    };\r\n  }, [connectedContract, onMint]);\r\n\r\n  return { hasNft, isMintingIndex, characters, mintNft, userNft, isModalOpen };\r\n};\r\n","export const lightTheme = {\r\n    body: \"#FFF\",\r\n    text: \"#363537\",\r\n    toggleBorder: \"lightGrey\",\r\n    background: \"#f1f1f1\",\r\n  };\r\n  \r\n  export const darkTheme = {\r\n    body: \"#363537\",\r\n    text: \"#FFF\",\r\n    toggleBorder: \"#6B8096\",\r\n    background: \"#363537\",\r\n  };","import styled from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n  borderRadius?: string;\r\n}\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n  border-radius: ${({ borderRadius }) => borderRadius ?? \"5px\"};\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  transition: 0.6s;\r\n  text-align: center;\r\n  justify-content: center;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  background: ${({ theme }) => theme.background};\r\n  color: ${({ theme }) => theme.text};\r\n  margin: 1em 0;\r\n\r\n  &:hover {\r\n    background-color: #3ca2c3;\r\n    color: white;\r\n    transform: scale(1.01);\r\n  }\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"src/components\";\r\n\r\ninterface TogglerProps {\r\n  toggleTheme: () => void;\r\n}\r\n\r\nexport const Toggler: FunctionComponent<TogglerProps> = ({ toggleTheme }) => (\r\n  <Container>\r\n    <Button onClick={toggleTheme}>Switch Theme</Button>\r\n  </Container>\r\n);\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  text-align: center;\r\n  justify-content: flex-end;\r\n  margin: 1em 0;\r\n  width: 7em;\r\n  position: absolute;\r\n  top: 0;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n`;\r\n","import { Container } from \"./styles\";\r\n\r\nexport const Arena = () => {\r\n  return <Container>Arena</Container>;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  text-align: center;\r\n  font-size: 1em;\r\n  padding: 1em;\r\n  text-shadow: 1px 1px 5px lightgrey;\r\n`;\r\n\r\nexport const CharactersContainer = styled.div`\r\n  display: flex;\r\n  gap: 2em;\r\n  justify-content: space-around;\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\ninterface CharacterProps {\r\n  backgroundImage: string;\r\n  isModal?: boolean;\r\n}\r\n\r\nexport const Character = styled.div<CharacterProps>`\r\n  cursor: pointer;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  padding: 1em;\r\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\r\n  border-radius: 8px;\r\n  width: ${({ isModal }) => !isModal && \"100%\"};\r\n  position: relative;\r\n  min-height: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    background-image: ${({ backgroundImage }) => `url(${backgroundImage})`};\r\n    background-position: center;\r\n    background-size: cover;\r\n    position: absolute;\r\n    top: 0px;\r\n    right: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    transition: 0.5s;\r\n    border-radius: 8px;\r\n    pointer-events: none;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n    width: auto;\r\n  }\r\n\r\n  &:hover {\r\n    background: rgba(60, 162, 195, 0.2);\r\n\r\n    &::before {\r\n      opacity: 0.2;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CharacterName = styled.p``;\r\n\r\nexport const CharacterHp = styled.p``;\r\n\r\nexport const CharacterMaxHp = styled.p``;\r\n\r\nexport const CharacterAttackDamage = styled.p``;\r\n","import { useContract } from \"src/hooks\";\r\nimport { Modal, Character } from \"src/components\";\r\nimport { Container, Title, CharactersContainer } from \"./styles\";\r\n\r\nexport const SelectCharacter = () => {\r\n  const { characters, mintNft, isMintingIndex, userNft, isModalOpen } =\r\n    useContract();\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Choose your hero and mint it</Title>\r\n      <CharactersContainer>\r\n        {!!characters.length &&\r\n          characters.map((character) => (\r\n            <Character\r\n              key={character.name}\r\n              isLoading={isMintingIndex === userNft?.index}\r\n              character={character}\r\n              mint={mintNft}\r\n            />\r\n          ))}\r\n      </CharactersContainer>\r\n      <Modal\r\n        content={\r\n          <Character\r\n            character={userNft}\r\n            isModal\r\n          />\r\n        }\r\n        isOpen={isModalOpen}\r\n        onClose={() => {\r\n          return;\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst spin = keyframes`\r\n        0% {\r\n          transform: rotate(0deg);\r\n        }\r\n  \r\n        50% {\r\n          transform: rotate(180deg);\r\n          opacity: 0.6;\r\n        }\r\n  \r\n        100% {\r\n          transform: rotate(360deg);\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\nexport const Loader = styled.div<{ inner?: boolean; innest?: boolean }>`\r\n  border: 8x solid lightBlue;\r\n  border-top: 8px solid rgba(255, 219, 220);\r\n  border-radius: 50%;\r\n  width: ${({ inner, innest }) => (inner ? \"40px\" : innest ? \"10px\" : \"65px\")};\r\n  height: ${({ inner, innest }) =>\r\n    inner ? \"33px\" : innest ? \"7px\" : \"60px\"};\r\n  animation: ${spin} 1.5s linear infinite;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Loader } from \"./styles\";\r\n\r\nexport const Spinner: FunctionComponent = () => (\r\n  <Loader>\r\n    <Loader inner>\r\n      <Loader innest />\r\n    </Loader>\r\n  </Loader>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\ninterface BackgroundProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nexport const Background = styled.div<BackgroundProps>`\r\n  background: rgba(0, 0, 0, 0.86);\r\n  position: fixed;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 90;\r\n  display: ${({ isOpen }) => (isOpen ? \"flex\" : \"none\")};\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #363537;\r\n  color: white;\r\n  border-radius: 8px;\r\n  width: 80%;\r\n  max-width: 500px;\r\n  padding: 1em 1.4em;\r\n  word-break: break-word;\r\n`;\r\n\r\nexport const CloseButton = styled.div`\r\n  align-self: flex-end;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 1em;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Background, CloseButton, Container, Content } from \"./styles\";\r\n\r\ninterface ModalProps {\r\n  content: string | JSX.Element;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const Modal: FunctionComponent<ModalProps> = ({\r\n  content,\r\n  isOpen,\r\n  onClose,\r\n}) => {\r\n  return (\r\n    <Background isOpen={isOpen}>\r\n      <Container>\r\n        <CloseButton onClick={onClose}>x</CloseButton>\r\n        <Content> {content}</Content>\r\n      </Container>\r\n    </Background>\r\n  );\r\n};\r\n","import styled from \"styled-components\";\r\n\r\ninterface ContainerProps {\r\n  backgroundImage: string;\r\n  isModal?: boolean;\r\n}\r\n\r\nexport const Container = styled.div<ContainerProps>`\r\n  cursor: ${({ isModal }) => !isModal && \"pointer\"};\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  padding: 1em;\r\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\r\n  border-radius: 8px;\r\n  width: ${({ isModal }) => !isModal && \"100%\"};\r\n  position: relative;\r\n  min-height: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  transition: 0.5s;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    background-image: ${({ backgroundImage }) => `url(${backgroundImage})`};\r\n    background-position: center;\r\n    background-size: cover;\r\n    position: absolute;\r\n    top: 0px;\r\n    right: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    transition: 0.5s;\r\n    border-radius: 8px;\r\n    pointer-events: none;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n    width: auto;\r\n  }\r\n\r\n  &:hover {\r\n    background: rgba(60, 162, 195, 0.2);\r\n\r\n    &::before {\r\n      opacity: 0.2;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CharacterName = styled.p``;\r\n\r\nexport const CharacterHp = styled.p``;\r\n\r\nexport const CharacterMaxHp = styled.p``;\r\n\r\nexport const CharacterAttackDamage = styled.p``;\r\n\r\nexport const Link = styled.a`\r\n  color: grey;\r\n  text-decoration: none;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Button, Spinner } from \"src/components\";\r\nimport { CONTRACT_ADDRESS, OPENSEA_LINK } from \"src/constants\";\r\nimport { Character as CharacterType } from \"src/types\";\r\nimport {\r\n  Container,\r\n  CharacterName,\r\n  CharacterHp,\r\n  CharacterMaxHp,\r\n  CharacterAttackDamage,\r\n  Link,\r\n} from \"./styles\";\r\n\r\ninterface CharacterProps {\r\n  character?: CharacterType;\r\n  isModal?: boolean;\r\n  isLoading?: boolean;\r\n  mint?: (characterIndex: number) => void;\r\n}\r\n\r\nexport const Character: FunctionComponent<CharacterProps> = ({\r\n  character,\r\n  isModal,\r\n  isLoading,\r\n  mint,\r\n}) => {\r\n  return (\r\n    <Container\r\n      key={character?.name}\r\n      backgroundImage={String(character?.imageURI)}\r\n      isModal={isModal}\r\n    >\r\n      {isLoading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <>\r\n          {isModal && (\r\n            <Link\r\n              target=\"_blank\"\r\n              href={`${OPENSEA_LINK}${CONTRACT_ADDRESS}/${character?.tokenId}`}\r\n            >\r\n              See your NFT in Opensea!\r\n            </Link>\r\n          )}\r\n          <CharacterName>{character?.name}</CharacterName>\r\n          <CharacterHp>\r\n            Health Points: <strong>{String(character?.hp)}</strong>\r\n          </CharacterHp>\r\n          <CharacterMaxHp>\r\n            Max Health Points: <strong>{String(character?.maxHp)}</strong>\r\n          </CharacterMaxHp>\r\n          <CharacterAttackDamage>\r\n            Attack Damage: <strong>{String(character?.attackDamage)}</strong>\r\n          </CharacterAttackDamage>\r\n          {mint && (\r\n            <Button onClick={() => mint(character!.index)}>\r\n              Mint a {character?.name}\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/squid.5ba43e23.jpeg\";","import { useContext, useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { WalletContext } from \"src/contexts\";\nimport { useContract } from \"src/hooks\";\nimport { lightTheme, darkTheme } from \"src/theme\";\nimport { Button, Toggler } from \"src/components\";\nimport image from \"src/assets/squid.jpeg\";\nimport { Arena, SelectCharacter } from \"./components\";\n\nconst App = () => {\n  const [theme, setTheme] = useState(\"dark\");\n\n  const { currentAccount, connectWallet } = useContext(WalletContext);\n  const { hasNft } = useContract();\n\n  const themeToggler = () =>\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <Container>\n        <ImageContainer>\n          <Image src={image} />\n        </ImageContainer>\n\n        <Toggler toggleTheme={themeToggler} />\n        <BodyContainer>\n          <Title> Let the games begin!</Title>\n\n          {\n            // if there's no account connected it shows the button to connect one\n            // if there's an account and it has an NFT minted it shows the arena to battle, if it doesn't have one it shows the character selection\n            !currentAccount ? (\n              <Button onClick={connectWallet}>Connect your wallet!</Button>\n            ) : hasNft ? (\n              <Arena />\n            ) : (\n              <SelectCharacter />\n            )\n          }\n        </BodyContainer>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n\nconst Container = styled.div`\n  text-align: center;\n  padding: 0 0 1em;\n  min-height: 100vh;\n  background-color: ${({ theme }) => theme.background};\n  box-sizing: border-box;\n  transition: 0.6s;\n  position: relative;\n`;\n\nconst BodyContainer = styled.div`\n  padding: 1em;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n  font-size: 2em;\n  padding: 0 0.3em;\n  color: ${({ theme }) => theme.text};\n  text-shadow: 1px 1px 15px ${({ theme }) => theme.text};\n  margin-top: 0;\n`;\n\nconst ImageContainer = styled.div`\n  max-height: 350px;\n  overflow-y: hidden;\n  margin: 0 0 2em;\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\n  border-radius: 5px;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  /* Avoid extra space below the image because of the default display inline */\n  display: flex;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { WalletContextProvider } from \"src/contexts\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WalletContextProvider>\n      <App />\n    </WalletContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}