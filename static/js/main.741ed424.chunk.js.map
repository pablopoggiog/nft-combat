{"version":3,"sources":["contexts/WalletContext.tsx","hooks/useContract.ts","constants/index.ts","theme/index.ts","components/Button/index.ts","components/Toggler/index.tsx","components/Arena/styles.ts","components/Arena/index.tsx","components/SelectCharacter/styles.ts","components/SelectCharacter/index.tsx","components/Spinner/styles.ts","assets/squid.jpeg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WalletContext","createContext","WalletContextProvider","children","useState","currentAccount","setCurrentAccount","connectWallet","a","window","ethereum","alert","request","method","accounts","console","log","networkVersion","checkIfWalletIsConnected","useCallback","length","account","useEffect","Provider","value","useContract","hasNFT","setHasNFT","characters","setCharacters","isLoading","setIsLoading","connectedContract","setConnectedContract","useContext","setUpContract","signer","ethers","providers","Web3Provider","getSigner","contract","Contract","contractData","abi","error","checkIfUserHasNFT","userNFT","name","getAllCharacters","allCharacters","lightTheme","body","text","toggleBorder","background","darkTheme","Button","styled","button","borderRadius","theme","Toggler","toggleTheme","Container","onClick","div","Arena","Title","h1","CharactersContainer","Character","CharacterName","p","CharacterHp","CharacterMaxHp","CharacterAttackDamage","CharacterImage","img","SelectCharacter","map","hp","maxHp","imageURI","attackDamage","src","String","spin","keyframes","inner","innest","App","setTheme","ImageContainer","Image","image","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.741ed424.chunk.js","sourcesContent":["import {\r\n  FunctionComponent,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  createContext,\r\n} from \"react\";\r\nimport { WalletContextReturn } from \"src/types\";\r\n\r\nexport const WalletContext = createContext<WalletContextReturn>({} as WalletContextReturn);\r\n\r\nexport const WalletContextProvider: FunctionComponent = ({ children }) => {\r\n  const [currentAccount, setCurrentAccount] = useState<string>(\"\");\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n\r\n      if (window.ethereum.networkVersion !== \"4\")\r\n        alert(\r\n          \"Hey â€” I see you're connected to mainnet but this only works on Rinkeby!\"\r\n        );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const checkIfWalletIsConnected = useCallback(async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n\r\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account);\r\n    } else {\r\n      console.log(\"No authorized account found\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [checkIfWalletIsConnected]);\r\n\r\n  return (\r\n    <WalletContext.Provider value={{ currentAccount, connectWallet }}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { ethers, Contract } from \"ethers\";\r\nimport { CONTRACT_ADDRESS } from \"src/constants\";\r\nimport { WalletContext } from \"src/contexts\";\r\nimport { Character, UseContract } from \"src/types\";\r\nimport contractData from \"src/utils/contract.json\";\r\n\r\nexport const useContract: UseContract = () => {\r\n  const [hasNFT, setHasNFT] = useState<boolean>(false);\r\n  const [characters, setCharacters] = useState<Character[]>([]);\r\n  const [isLoading, setIsLoading] = useState<boolean>(false);\r\n  const [connectedContract, setConnectedContract] = useState<Contract>();\r\n\r\n  const { currentAccount } = useContext(WalletContext);\r\n\r\n  const setUpContract = useCallback(() => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(\r\n          CONTRACT_ADDRESS,\r\n          contractData.abi,\r\n          signer\r\n        );\r\n\r\n        setConnectedContract(contract);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  const checkIfUserHasNFT = useCallback(async () => {\r\n    if (connectedContract) {\r\n      setIsLoading(true);\r\n\r\n      const userNFT: Character = await connectedContract.checkIfUserHasNFT();\r\n      setHasNFT(!!userNFT.name);\r\n\r\n      setIsLoading(false);\r\n    }\r\n  }, [connectedContract]);\r\n\r\n  const getAllCharacters = useCallback(async () => {\r\n    if (connectedContract) {\r\n      const allCharacters: Character[] =\r\n        await connectedContract.getAllCharacters();\r\n      setCharacters(allCharacters);\r\n    }\r\n  }, [connectedContract]);\r\n\r\n  useEffect(() => {\r\n    currentAccount && setUpContract();\r\n  }, [currentAccount, setUpContract]);\r\n\r\n  useEffect(() => {\r\n    checkIfUserHasNFT();\r\n  }, [checkIfUserHasNFT]);\r\n\r\n  useEffect(() => {\r\n    getAllCharacters();\r\n  }, [getAllCharacters]);\r\n\r\n  useEffect(() => {\r\n    console.log({characters});\r\n  }, [characters]);\r\n\r\n  return { hasNFT, isLoading, characters };\r\n};\r\n","export const OPENSEA_LINK =\r\n  \"https://testnets.opensea.io/collection/\";\r\nexport const CONTRACT_ADDRESS = \"0xF4493Fd72e31d3A1285e49B6250d51CEd20bb856\";","export const lightTheme = {\r\n    body: \"#FFF\",\r\n    text: \"#363537\",\r\n    toggleBorder: \"lightGrey\",\r\n    background: \"#f1f1f1\",\r\n  };\r\n  \r\n  export const darkTheme = {\r\n    body: \"#363537\",\r\n    text: \"#FFF\",\r\n    toggleBorder: \"#6B8096\",\r\n    background: \"#363537\",\r\n  };","import styled from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n  borderRadius?: string;\r\n}\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n  border-radius: ${({ borderRadius }) => borderRadius ?? \"5px\"};\r\n  padding: 10px;\r\n  cursor: pointer;\r\n  transition: 0.6s;\r\n  text-align: center;\r\n  justify-content: center;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  background: ${({ theme }) => theme.background};\r\n  color: ${({ theme }) => theme.text};\r\n  margin: 1em 0;\r\n\r\n  &:hover {\r\n    background-color: #3ca2c3;\r\n    color: white;\r\n    transform: scale(1.01);\r\n  }\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Button } from \"src/components\";\r\n\r\ninterface TogglerProps {\r\n  toggleTheme: () => void;\r\n}\r\n\r\nexport const Toggler: FunctionComponent<TogglerProps> = ({ toggleTheme }) => (\r\n  <Container>\r\n    <Button onClick={toggleTheme}>Switch Theme</Button>\r\n  </Container>\r\n);\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  text-align: center;\r\n  justify-content: flex-end;\r\n  margin: 1em 0;\r\n  width: 7em;\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n`;\r\n","import { Container } from \"./styles\";\r\n\r\nexport const Arena = () => {\r\n  return <Container>Arena</Container>;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  text-align: center;\r\n  font-size: 1em;\r\n  padding: 1em;\r\n  text-shadow: 1px 1px 10px ${({ theme }) => theme.text};\r\n`;\r\n\r\nexport const CharactersContainer = styled.div`\r\n  display: flex;\r\n  gap: 2em;\r\n  justify-content: space-around;\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\nexport const Character = styled.div`\r\n  cursor: pointer;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  padding: 1em;\r\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\r\n  border-radius: 8px;\r\n    width: 100%;\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n    width: auto;\r\n  }\r\n\r\n  &:hover {\r\n      background: rgba(255, 255, 255, 0.1);\r\n  }\r\n`;\r\n\r\nexport const CharacterName = styled.p``;\r\n\r\nexport const CharacterHp = styled.p``;\r\n\r\nexport const CharacterMaxHp = styled.p``;\r\n\r\nexport const CharacterAttackDamage = styled.p``;\r\n\r\nexport const CharacterImage = styled.img`\r\n  height: 100px;\r\n  border-radius: 8px;\r\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\r\n`;\r\n","import { useContract } from \"src/hooks\";\r\nimport {\r\n  Container,\r\n  Title,\r\n  CharactersContainer,\r\n  Character,\r\n  CharacterName,\r\n  CharacterHp,\r\n  CharacterMaxHp,\r\n  CharacterAttackDamage,\r\n  CharacterImage,\r\n} from \"./styles\";\r\n\r\nexport const SelectCharacter = () => {\r\n  const { characters } = useContract();\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Choose your hero and mint it!</Title>\r\n      <CharactersContainer>\r\n        {!!characters.length &&\r\n          characters.map(({ name, hp, maxHp, imageURI, attackDamage }) => (\r\n            <Character>\r\n              <CharacterName>{name}</CharacterName>\r\n              <CharacterImage src={imageURI} />\r\n              <CharacterHp>\r\n                Health Points: <strong>{String(hp)}</strong>\r\n              </CharacterHp>\r\n              <CharacterMaxHp>\r\n                Max Health Points: <strong>{String(maxHp)}</strong>\r\n              </CharacterMaxHp>\r\n              <CharacterAttackDamage>\r\n                Attack Damage: <strong>{String(attackDamage)}</strong>\r\n              </CharacterAttackDamage>\r\n            </Character>\r\n          ))}\r\n      </CharactersContainer>\r\n    </Container>\r\n  );\r\n};\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst spin = keyframes`\r\n        0% {\r\n          transform: rotate(0deg);\r\n        }\r\n  \r\n        50% {\r\n          transform: rotate(180deg);\r\n          opacity: 0.6;\r\n        }\r\n  \r\n        100% {\r\n          transform: rotate(360deg);\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\nexport const Loader = styled.div<{ inner?: boolean; innest?: boolean }>`\r\n  border: 8x solid lightBlue;\r\n  border-top: 8px solid rgba(255, 219, 220);\r\n  border-radius: 50%;\r\n  width: ${({ inner, innest }) => (inner ? \"40px\" : innest ? \"10px\" : \"65px\")};\r\n  height: ${({ inner, innest }) =>\r\n    inner ? \"33px\" : innest ? \"7px\" : \"60px\"};\r\n  animation: ${spin} 1.5s linear infinite;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","export default __webpack_public_path__ + \"static/media/squid.5ba43e23.jpeg\";","import { useContext, useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { WalletContext } from \"src/contexts\";\nimport { useContract } from \"src/hooks\";\nimport { lightTheme, darkTheme } from \"src/theme\";\nimport { Button, Toggler } from \"src/components\";\nimport image from \"src/assets/squid.jpeg\";\nimport { Arena, SelectCharacter } from \"./components\";\n\nconst App = () => {\n  const [theme, setTheme] = useState(\"dark\");\n\n  const { currentAccount, connectWallet } = useContext(WalletContext);\n  const { hasNFT } = useContract();\n\n  const themeToggler = () =>\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <Container>\n        <Toggler toggleTheme={themeToggler} />\n        <Title> Let the games begin!</Title>\n        <ImageContainer>\n          <Image src={image} />\n        </ImageContainer>\n\n        {\n          // if there's no account connected it shows the button to connect one\n          // if there's an account and it has an NFT minted it shows the arena to battle, if it doesn't have one it shows the character selection\n          !currentAccount ? (\n            <Button onClick={connectWallet}>Connect your wallet!</Button>\n          ) : !hasNFT ? (\n            <Arena />\n          ) : (\n            <SelectCharacter />\n          )\n        }\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n\nconst Container = styled.div`\n  text-align: center;\n  padding: 1em;\n  min-height: 100vh;\n  background-color: ${({ theme }) => theme.background};\n  box-sizing: border-box;\n  transition: 0.6s;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n  font-size: 2em;\n  padding: 1em 0.3em;\n  color: ${({ theme }) => theme.text};\n  text-shadow: 1px 1px 20px ${({ theme }) => theme.text};\n  margin-top: 0;\n`;\n\nconst ImageContainer = styled.div`\n  max-height: 400px;\n  overflow-y: hidden;\n  margin: 2em 0;\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\n  border-radius: 5px;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  /* Avoid extra space below the image because of the default display inline */\n  display: flex;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { WalletContextProvider } from \"src/contexts\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WalletContextProvider>\n      <App />\n    </WalletContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}