{"version":3,"sources":["contexts/WalletContext.tsx","assets/combat-music.mp3","constants/index.ts","hooks/useContract.ts","theme/index.ts","components/Button/index.ts","components/Toggler/styles.ts","components/Toggler/index.tsx","components/Arena/styles.ts","components/Arena/index.tsx","components/SelectCharacter/styles.ts","components/SelectCharacter/index.tsx","components/Spinner/styles.ts","components/Spinner/index.tsx","components/Modal/styles.ts","components/Modal/index.tsx","components/Character/styles.ts","components/Character/index.tsx","components/Boss/styles.ts","components/Boss/index.tsx","assets/squid.jpeg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WalletContext","createContext","WalletContextProvider","children","useState","currentAccount","setCurrentAccount","connectWallet","a","window","ethereum","alert","request","method","accounts","console","log","networkVersion","checkIfWalletIsConnected","useCallback","length","account","useEffect","Provider","value","CONTRACT_ADDRESS","useContract","hasNft","setHasNft","userNft","setUserNft","characters","setCharacters","isMintingIndex","setIsMintingIndex","isModalOpen","setIsModalOpen","connectedContract","setConnectedContract","name","hp","maxHp","imageURI","attackDamage","boss","setBoss","attackStatus","setAttackStatus","onAttackComplete","bossHp","playerHp","useContext","setUpContract","signer","ethers","providers","Web3Provider","getSigner","contract","Contract","contractData","abi","error","checkIfUserhasNft","checkIfUserHasNFT","userNFT","getAllCharacters","allCharacters","mintNft","characterIndex","mintNFT","transaction","wait","onMint","sender","tokenId","toNumber","characterNFT","getBoss","attackBoss","fetchBoss","fetchedBoss","on","off","lightTheme","body","text","toggleBorder","background","darkTheme","Button","styled","button","borderRadius","disabled","theme","Container","div","Toggler","toggleTheme","onClick","CharacterContainer","HealthPoints","p","Arena","style","width","status","Number","character","isLoading","Health","max","Title","h1","CharactersContainer","SelectCharacter","isModal","backgroundImage","map","index","actionButton","content","isOpen","onClose","spin","keyframes","Loader","inner","innest","Spinner","Background","CloseButton","Content","Modal","blink","css","CharacterName","CharacterHp","CharacterMaxHp","CharacterAttackDamage","Link","Character","String","target","href","Boss","App","setTheme","musicStatus","setmusicStatus","TogglersContainer","ImageContainer","Image","src","image","BodyContainer","url","music","playStatus","img","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70724921.chunk.js","sourcesContent":["import {\r\n  FunctionComponent,\r\n  useEffect,\r\n  useState,\r\n  useCallback,\r\n  createContext,\r\n} from \"react\";\r\nimport { WalletContextReturn } from \"src/types\";\r\n\r\nexport const WalletContext = createContext<WalletContextReturn>({} as WalletContextReturn);\r\n\r\nexport const WalletContextProvider: FunctionComponent = ({ children }) => {\r\n  const [currentAccount, setCurrentAccount] = useState<string>(\"\");\r\n\r\n  const connectWallet = async () => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (!ethereum) {\r\n        alert(\"Get MetaMask!\");\r\n        return;\r\n      }\r\n\r\n      const accounts = await ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n\r\n      console.log(\"Connected\", accounts[0]);\r\n      setCurrentAccount(accounts[0]);\r\n\r\n      if (window.ethereum.networkVersion !== \"4\")\r\n        alert(\r\n          \"Hey — I see you're connected to mainnet but this only works on Rinkeby!\"\r\n        );\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const checkIfWalletIsConnected = useCallback(async () => {\r\n    const { ethereum } = window;\r\n\r\n    if (!ethereum) {\r\n      console.log(\"Make sure you have metamask!\");\r\n      return;\r\n    } else {\r\n      console.log(\"We have the ethereum object\", ethereum);\r\n    }\r\n\r\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\r\n\r\n    if (accounts.length !== 0) {\r\n      const account = accounts[0];\r\n      console.log(\"Found an authorized account:\", account);\r\n      setCurrentAccount(account);\r\n    } else {\r\n      console.log(\"No authorized account found\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    checkIfWalletIsConnected();\r\n  }, [checkIfWalletIsConnected]);\r\n\r\n  return (\r\n    <WalletContext.Provider value={{ currentAccount, connectWallet }}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/combat-music.85f575ba.mp3\";","export const OPENSEA_LINK =\r\n  \"https://testnets.opensea.io/assets/\";\r\nexport const CONTRACT_ADDRESS = \"0xfD46fd7903E30C48ad7A4652bDdE9B933f0B1D06\";","import { useCallback, useContext, useEffect, useState } from \"react\";\r\nimport { ethers, Contract } from \"ethers\";\r\nimport { CONTRACT_ADDRESS } from \"src/constants\";\r\nimport { WalletContext } from \"src/contexts\";\r\nimport { AttackStatus, Character, UseContract, Boss } from \"src/types\";\r\nimport contractData from \"src/utils/contract.json\";\r\n\r\nexport const useContract: UseContract = () => {\r\n  const [hasNft, setHasNft] = useState<boolean>(false);\r\n  const [userNft, setUserNft] = useState<Character>();\r\n  const [characters, setCharacters] = useState<Character[]>([]);\r\n  const [isMintingIndex, setIsMintingIndex] = useState<number | null>(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [connectedContract, setConnectedContract] = useState<Contract>();\r\n  const [boss, setBoss] = useState<Boss>({\r\n    name: \"\",\r\n    hp: \"\",\r\n    maxHp: \"\",\r\n    imageURI: \"\",\r\n    attackDamage: \"\",\r\n  });\r\n  const [attackStatus, setAttackStatus] = useState<AttackStatus>(\"idle\");\r\n\r\n  const onAttackComplete = useCallback(\r\n    async (bossHp: Boss[\"hp\"], playerHp: Character[\"hp\"]) => {\r\n      setBoss((boss) => ({ ...boss!, hp: bossHp }));\r\n      setUserNft((userNft) => ({ ...userNft!, hp: playerHp }));\r\n      setAttackStatus(\"finished\");\r\n    },\r\n    [setUserNft]\r\n  );\r\n\r\n  const { currentAccount } = useContext(WalletContext);\r\n\r\n  const setUpContract = useCallback(() => {\r\n    try {\r\n      const { ethereum } = window;\r\n\r\n      if (ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(\r\n          CONTRACT_ADDRESS,\r\n          contractData.abi,\r\n          signer\r\n        );\r\n\r\n        setConnectedContract(contract);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  }, []);\r\n\r\n  const checkIfUserhasNft = useCallback(async () => {\r\n    if (connectedContract) {\r\n      const userNFT: Character = await connectedContract.checkIfUserHasNFT();\r\n      setHasNft(!!userNFT.name);\r\n      setUserNft(userNFT);\r\n    }\r\n  }, [connectedContract]);\r\n\r\n  const getAllCharacters = useCallback(async () => {\r\n    if (connectedContract) {\r\n      const allCharacters: Character[] =\r\n        await connectedContract.getAllCharacters();\r\n      setCharacters(allCharacters);\r\n    }\r\n  }, [connectedContract]);\r\n\r\n  const mintNft = useCallback(\r\n    async (characterIndex: number) => {\r\n      if (connectedContract) {\r\n        setIsMintingIndex(characterIndex);\r\n        const transaction = await connectedContract.mintNFT(characterIndex);\r\n\r\n        await transaction.wait();\r\n\r\n        setIsMintingIndex(null);\r\n      }\r\n    },\r\n    [connectedContract]\r\n  );\r\n\r\n  const onMint = useCallback(\r\n    async (sender, tokenId, characterIndex) => {\r\n      console.log(\r\n        `NFT Minted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\r\n      );\r\n\r\n      if (connectedContract) {\r\n        const characterNFT = await connectedContract.checkIfUserHasNFT();\r\n        console.log({ characterNFT });\r\n        setHasNft(true);\r\n        setUserNft({ ...characterNFT, tokenId: tokenId.toNumber() });\r\n        setIsModalOpen(true);\r\n      }\r\n    },\r\n    [connectedContract]\r\n  );\r\n\r\n  const getBoss = useCallback(async () => {\r\n    if (connectedContract) {\r\n      const boss = await connectedContract.getBoss();\r\n      console.log({ boss });\r\n      return boss;\r\n    }\r\n  }, [connectedContract]);\r\n\r\n  const attackBoss = useCallback(async () => {\r\n    if (connectedContract) {\r\n      setAttackStatus(\"attacking\");\r\n      try {\r\n        const transaction = await connectedContract.attackBoss();\r\n        await transaction.wait();\r\n      } catch (error) {\r\n        console.log({ error });\r\n        setAttackStatus(\"idle\");\r\n      }\r\n    }\r\n  }, [connectedContract]);\r\n\r\n  const fetchBoss = useCallback(async () => {\r\n    const fetchedBoss = await getBoss();\r\n    setBoss(fetchedBoss);\r\n  }, [getBoss]);\r\n\r\n  useEffect(() => {\r\n    currentAccount && setUpContract();\r\n  }, [currentAccount, setUpContract]);\r\n\r\n  useEffect(() => {\r\n    checkIfUserhasNft();\r\n  }, [checkIfUserhasNft]);\r\n\r\n  useEffect(() => {\r\n    getAllCharacters();\r\n  }, [getAllCharacters]);\r\n\r\n  useEffect(() => {\r\n    connectedContract?.on(\"NFTMinted\", onMint);\r\n    connectedContract?.on(\"AttackComplete\", onAttackComplete);\r\n\r\n    return () => {\r\n      if (connectedContract) {\r\n        connectedContract.off(\"NFTMinted\", onMint);\r\n        connectedContract.off(\"AttackComplete\", onAttackComplete);\r\n      }\r\n    };\r\n  }, [connectedContract, onMint, onAttackComplete]);\r\n\r\n  return {\r\n    hasNft,\r\n    isMintingIndex,\r\n    characters,\r\n    mintNft,\r\n    userNft,\r\n    setUserNft,\r\n    isModalOpen,\r\n    fetchBoss,\r\n    boss,\r\n    attackBoss,\r\n    attackStatus,\r\n  };\r\n};\r\n","export const lightTheme = {\r\n    body: \"#FFF\",\r\n    text: \"#363537\",\r\n    toggleBorder: \"lightGrey\",\r\n    background: \"#f1f1f1\",\r\n  };\r\n  \r\n  export const darkTheme = {\r\n    body: \"#363537\",\r\n    text: \"#FFF\",\r\n    toggleBorder: \"#6B8096\",\r\n    background: \"#363537\",\r\n  };","import styled from \"styled-components\";\r\n\r\ninterface ButtonProps {\r\n  borderRadius?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport const Button = styled.button<ButtonProps>`\r\n  border-radius: ${({ borderRadius }) => borderRadius ?? \"5px\"};\r\n  padding: 10px;\r\n  cursor: ${({ disabled }) => (disabled ? \"not-allowed\" : \"pointer\")};\r\n  transition: 0.6s;\r\n  text-align: center;\r\n  justify-content: center;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  background: ${({ theme }) => theme.background};\r\n  color: ${({ theme }) => theme.text};\r\n  margin: 1em 0;\r\n\r\n  &:hover {\r\n    background-color: #3ca2c3;\r\n    color: white;\r\n    transform: scale(1.01);\r\n  }\r\n\r\n  &:focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  text-align: center;\r\n  justify-content: flex-end;\r\n  margin: 0.5em;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Button } from \"src/components\";\r\nimport { Container } from \"./styles\";\r\n\r\ninterface TogglerProps {\r\n  toggleTheme: () => void;\r\n  text: string;\r\n}\r\n\r\nexport const Toggler: FunctionComponent<TogglerProps> = ({\r\n  toggleTheme,\r\n  text,\r\n}) => (\r\n  <Container>\r\n    <Button onClick={toggleTheme}>{text}</Button>\r\n  </Container>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100%;\r\n  gap: 2em;\r\n`;\r\n\r\nexport const CharacterContainer = styled.div`\r\n  width: 300px;\r\n`;\r\n\r\nexport const HealthPoints = styled.p`\r\n  color: ${({ theme }) => theme.text};\r\n`;","import { FunctionComponent, useEffect } from \"react\";\r\nimport { Container, CharacterContainer, HealthPoints } from \"./styles\";\r\nimport { Button, Boss, Character } from \"src/components\";\r\nimport { useContract } from \"src/hooks\";\r\n\r\nexport const Arena = () => {\r\n  const { boss, fetchBoss, attackBoss, userNft, attackStatus } = useContract();\r\n\r\n  useEffect(() => {\r\n    fetchBoss();\r\n  }, [fetchBoss]);\r\n\r\n  return (\r\n    <Container>\r\n      <div style={{ width: \"100%\" }}>\r\n        <Boss boss={boss} status={attackStatus} />\r\n        <Health hp={boss?.hp} maxHp={boss?.maxHp} />\r\n      </div>\r\n      <Button onClick={attackBoss} disabled={!(Number(userNft?.hp) > 0)}>\r\n        Attack the boss!\r\n      </Button>\r\n      <CharacterContainer>\r\n        <Character\r\n          character={userNft}\r\n          status={attackStatus}\r\n          isLoading={attackStatus === \"attacking\"}\r\n        />\r\n        <Health hp={userNft?.hp} maxHp={userNft?.maxHp} />\r\n      </CharacterContainer>\r\n    </Container>\r\n  );\r\n};\r\n\r\ninterface HealthPointsProps {\r\n  hp?: string;\r\n  maxHp?: string;\r\n}\r\n\r\nconst Health: FunctionComponent<HealthPointsProps> = ({ hp, maxHp }) => (\r\n  <>\r\n    <progress value={hp} max={maxHp} />\r\n    <HealthPoints>{`${hp}/${maxHp}`}</HealthPoints>\r\n  </>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  color: ${({ theme }) => theme.text};\r\n`;\r\n\r\nexport const Title = styled.h1`\r\n  text-align: center;\r\n  font-size: 1em;\r\n  padding: 1em;\r\n  text-shadow: 1px 1px 5px lightgrey;\r\n`;\r\n\r\nexport const CharactersContainer = styled.div`\r\n  display: flex;\r\n  gap: 2em;\r\n  justify-content: space-around;\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n  }\r\n`;\r\n\r\ninterface CharacterProps {\r\n  backgroundImage: string;\r\n  isModal?: boolean;\r\n}\r\n\r\nexport const Character = styled.div<CharacterProps>`\r\n  cursor: pointer;\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  padding: 1em;\r\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\r\n  border-radius: 8px;\r\n  width: ${({ isModal }) => !isModal && \"100%\"};\r\n  position: relative;\r\n  min-height: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n\r\n  &::before {\r\n    content: \"\";\r\n    background-image: ${({ backgroundImage }) => `url(${backgroundImage})`};\r\n    background-position: center;\r\n    background-size: cover;\r\n    position: absolute;\r\n    top: 0px;\r\n    right: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    transition: 0.5s;\r\n    border-radius: 8px;\r\n    pointer-events: none;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n    width: auto;\r\n  }\r\n\r\n  &:hover {\r\n    background: rgba(60, 162, 195, 0.2);\r\n\r\n    &::before {\r\n      opacity: 0.2;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CharacterName = styled.p``;\r\n\r\nexport const CharacterHp = styled.p``;\r\n\r\nexport const CharacterMaxHp = styled.p``;\r\n\r\nexport const CharacterAttackDamage = styled.p``;\r\n","import { useContract } from \"src/hooks\";\r\nimport { Button, Modal, Character } from \"src/components\";\r\nimport { Container, Title, CharactersContainer } from \"./styles\";\r\n\r\nexport const SelectCharacter = () => {\r\n  const { characters, mintNft, isMintingIndex, userNft, isModalOpen } =\r\n    useContract();\r\n\r\n  return (\r\n    <Container>\r\n      <Title>Choose your hero and mint it</Title>\r\n      <CharactersContainer>\r\n        {!!characters.length &&\r\n          characters.map((character) => (\r\n            <Character\r\n              key={character.name}\r\n              isLoading={isMintingIndex === userNft?.index}\r\n              character={character}\r\n              actionButton={\r\n                <Button onClick={() => mintNft(character!.index)}>\r\n                  Mint a {character?.name}\r\n                </Button>\r\n              }\r\n            />\r\n          ))}\r\n      </CharactersContainer>\r\n      <Modal\r\n        content={<Character character={userNft} isModal />}\r\n        isOpen={isModalOpen}\r\n        onClose={() => {\r\n          return;\r\n        }}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n","import styled, { keyframes } from \"styled-components\";\r\n\r\nconst spin = keyframes`\r\n        0% {\r\n          transform: rotate(0deg);\r\n        }\r\n  \r\n        50% {\r\n          transform: rotate(180deg);\r\n          opacity: 0.6;\r\n        }\r\n  \r\n        100% {\r\n          transform: rotate(360deg);\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\nexport const Loader = styled.div<{ inner?: boolean; innest?: boolean }>`\r\n  border: 8x solid lightBlue;\r\n  border-top: 8px solid rgba(255, 219, 220);\r\n  border-radius: 50%;\r\n  width: ${({ inner, innest }) => (inner ? \"40px\" : innest ? \"10px\" : \"65px\")};\r\n  height: ${({ inner, innest }) =>\r\n    inner ? \"33px\" : innest ? \"7px\" : \"60px\"};\r\n  animation: ${spin} 1.5s linear infinite;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Loader } from \"./styles\";\r\n\r\nexport const Spinner: FunctionComponent = () => (\r\n  <Loader>\r\n    <Loader inner>\r\n      <Loader innest />\r\n    </Loader>\r\n  </Loader>\r\n);\r\n","import styled from \"styled-components\";\r\n\r\ninterface BackgroundProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nexport const Background = styled.div<BackgroundProps>`\r\n  background: rgba(0, 0, 0, 0.86);\r\n  position: fixed;\r\n  bottom: 0;\r\n  top: 0;\r\n  right: 0;\r\n  left: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  z-index: 90;\r\n  display: ${({ isOpen }) => (isOpen ? \"flex\" : \"none\")};\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #363537;\r\n  color: white;\r\n  border-radius: 8px;\r\n  width: 80%;\r\n  max-width: 500px;\r\n  padding: 1em 1.4em;\r\n  word-break: break-word;\r\n`;\r\n\r\nexport const CloseButton = styled.div`\r\n  align-self: flex-end;\r\n  cursor: pointer;\r\n  transition: 0.3s;\r\n\r\n  &:hover {\r\n    transform: scale(1.2);\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 1em;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Background, CloseButton, Container, Content } from \"./styles\";\r\n\r\ninterface ModalProps {\r\n  content: string | JSX.Element;\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n}\r\n\r\nexport const Modal: FunctionComponent<ModalProps> = ({\r\n  content,\r\n  isOpen,\r\n  onClose,\r\n}) => {\r\n  return (\r\n    <Background isOpen={isOpen}>\r\n      <Container>\r\n        <CloseButton onClick={onClose}>x</CloseButton>\r\n        <Content> {content}</Content>\r\n      </Container>\r\n    </Background>\r\n  );\r\n};\r\n","import styled, { css, keyframes } from \"styled-components\";\r\nimport { AttackStatus } from \"src/types\";\r\n\r\nconst blink = keyframes`\r\n        0% {\r\n          opacity: 0;\r\n        }\r\n  \r\n        100% {\r\n          opacity: 1;\r\n        }\r\n      `;\r\n\r\ninterface ContainerProps {\r\n  backgroundImage: string;\r\n  isModal?: boolean;\r\n  status: AttackStatus;\r\n}\r\n\r\nexport const Container = styled.div<ContainerProps>`\r\n  cursor: ${({ isModal }) => !isModal && \"pointer\"};\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\r\n  border-radius: 8px;\r\n  width: ${({ isModal }) => !isModal && \"100%\"};\r\n  position: relative;\r\n  min-height: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  transition: 0.5s;\r\n  color: ${({ theme }) => theme.text};\r\n  width: 100%;\r\n  animation: ${({ status }) =>\r\n    status === \"finished\" &&\r\n    css`\r\n      ${blink} 0.1s linear alternate 10\r\n    `};\r\n\r\n  &::before {\r\n    content: \"\";\r\n    background-image: ${({ backgroundImage }) => `url(${backgroundImage})`};\r\n    background-position: center;\r\n    background-size: cover;\r\n    position: absolute;\r\n    top: 0px;\r\n    right: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    transition: 0.5s;\r\n    border-radius: 8px;\r\n    pointer-events: none;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n    width: auto;\r\n  }\r\n\r\n  &:hover {\r\n    background: rgba(60, 162, 195, 0.2);\r\n\r\n    &::before {\r\n      opacity: 0.2;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CharacterName = styled.p``;\r\n\r\nexport const CharacterHp = styled.p``;\r\n\r\nexport const CharacterMaxHp = styled.p``;\r\n\r\nexport const CharacterAttackDamage = styled.p``;\r\n\r\nexport const Link = styled.a`\r\n  color: grey;\r\n  text-decoration: none;\r\n`;\r\n","import { FunctionComponent } from \"react\";\r\nimport { Spinner } from \"src/components\";\r\nimport { CONTRACT_ADDRESS, OPENSEA_LINK } from \"src/constants\";\r\nimport { AttackStatus, Character as CharacterType } from \"src/types\";\r\nimport {\r\n  Container,\r\n  CharacterName,\r\n  CharacterHp,\r\n  CharacterMaxHp,\r\n  CharacterAttackDamage,\r\n  Link,\r\n} from \"./styles\";\r\n\r\ninterface CharacterProps {\r\n  character?: CharacterType;\r\n  isModal?: boolean;\r\n  isLoading?: boolean;\r\n  actionButton?: JSX.Element;\r\n  status?: AttackStatus;\r\n}\r\n\r\nexport const Character: FunctionComponent<CharacterProps> = ({\r\n  character,\r\n  isModal,\r\n  isLoading,\r\n  actionButton,\r\n  status,\r\n}) => {\r\n  return (\r\n    <Container\r\n      key={character?.name}\r\n      backgroundImage={String(character?.imageURI)}\r\n      isModal={isModal}\r\n      status={status ?? \"idle\"}\r\n    >\r\n      {isLoading ? (\r\n        <Spinner />\r\n      ) : (\r\n        <>\r\n          {isModal && (\r\n            <Link\r\n              target=\"_blank\"\r\n              href={`${OPENSEA_LINK}${CONTRACT_ADDRESS}/${character?.tokenId}`}\r\n            >\r\n              See your NFT in Opensea!\r\n            </Link>\r\n          )}\r\n          <CharacterName>{character?.name}</CharacterName>\r\n          <CharacterHp>\r\n            Health Points: <strong>{String(character?.hp)}</strong>\r\n          </CharacterHp>\r\n          <CharacterMaxHp>\r\n            Max Health Points: <strong>{String(character?.maxHp)}</strong>\r\n          </CharacterMaxHp>\r\n          <CharacterAttackDamage>\r\n            Attack Damage: <strong>{String(character?.attackDamage)}</strong>\r\n          </CharacterAttackDamage>\r\n          {actionButton}\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n","import styled, { css, keyframes } from \"styled-components\";\r\nimport { AttackStatus } from \"src/types\";\r\n\r\nconst blink = keyframes`\r\n        0% {\r\n          opacity: 0;\r\n        }\r\n  \r\n        100% {\r\n          opacity: 1;\r\n        }\r\n      `;\r\ninterface ContainerProps {\r\n  backgroundImage: string;\r\n  status: AttackStatus;\r\n}\r\n\r\nexport const Container = styled.div<ContainerProps>`\r\n  border: 1px solid ${({ theme }) => theme.toggleBorder};\r\n  padding: 1em;\r\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\r\n  border-radius: 8px;\r\n  position: relative;\r\n  width: 100%;\r\n  min-height: 250px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  transition: 0.5s;\r\n  color: ${({ theme }) => theme.text};\r\n  box-sizing: border-box;\r\n  animation: ${({ status }) =>\r\n    status === \"attacking\" &&\r\n    css`\r\n      ${blink} 0.1s linear alternate infinite\r\n    `};\r\n\r\n  &::before {\r\n    content: \"\";\r\n    background-image: ${({ backgroundImage }) => `url(${backgroundImage})`};\r\n    background-position: center;\r\n    background-size: cover;\r\n    position: absolute;\r\n    top: 0px;\r\n    right: 0px;\r\n    bottom: 0px;\r\n    left: 0px;\r\n    transition: 0.5s;\r\n    border-radius: 8px;\r\n    pointer-events: none;\r\n  }\r\n\r\n  @media (max-width: 600px) {\r\n    flex-direction: column;\r\n  }\r\n\r\n  &:hover {\r\n    background: rgba(60, 162, 195, 0.2);\r\n\r\n    &::before {\r\n      opacity: 0.2;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CharacterName = styled.p``;\r\n\r\nexport const CharacterHp = styled.p``;\r\n\r\nexport const CharacterMaxHp = styled.p``;\r\n\r\nexport const CharacterAttackDamage = styled.p``;\r\n","import { FunctionComponent } from \"react\";\r\nimport { AttackStatus, Boss as BossType } from \"src/types\";\r\nimport {\r\n  Container,\r\n  CharacterName,\r\n  CharacterHp,\r\n  CharacterMaxHp,\r\n  CharacterAttackDamage,\r\n} from \"./styles\";\r\n\r\ninterface BossProps {\r\n  boss?: BossType;\r\n  status: AttackStatus;\r\n}\r\n\r\nexport const Boss: FunctionComponent<BossProps> = ({ boss, status }) => {\r\n  return (\r\n    <Container backgroundImage={String(boss?.imageURI)} status={status}>\r\n      <CharacterName>{boss?.name}</CharacterName>\r\n      <CharacterHp>\r\n        Health Points: <strong>{String(boss?.hp)}</strong>\r\n      </CharacterHp>\r\n      <CharacterMaxHp>\r\n        Max Health Points: <strong>{String(boss?.maxHp)}</strong>\r\n      </CharacterMaxHp>\r\n      <CharacterAttackDamage>\r\n        Attack Damage: <strong>{String(boss?.attackDamage)}</strong>\r\n      </CharacterAttackDamage>\r\n    </Container>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/squid.5ba43e23.jpeg\";","import { useContext, useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport Sound from \"react-sound\";\nimport music from \"src/assets/combat-music.mp3\";\nimport { WalletContext } from \"src/contexts\";\nimport { useContract } from \"src/hooks\";\nimport { lightTheme, darkTheme } from \"src/theme\";\nimport { Button, Toggler } from \"src/components\";\nimport image from \"src/assets/squid.jpeg\";\nimport { Arena, SelectCharacter } from \"./components\";\n\nconst App = () => {\n  const [theme, setTheme] = useState(\"dark\");\n\n  const [musicStatus, setmusicStatus] = useState<\n    \"PLAYING\" | \"STOPPED\" | \"PAUSED\"\n  >(\"STOPPED\");\n\n  const { currentAccount, connectWallet } = useContext(WalletContext);\n  const { hasNft } = useContract();\n\n  const musicToggler = () =>\n    musicStatus === \"STOPPED\"\n      ? setmusicStatus(\"PLAYING\")\n      : setmusicStatus(\"STOPPED\");\n\n  const themeToggler = () =>\n    theme === \"light\" ? setTheme(\"dark\") : setTheme(\"light\");\n\n  return (\n    <ThemeProvider theme={theme === \"light\" ? lightTheme : darkTheme}>\n      <Container>\n        <TogglersContainer>\n          <Toggler toggleTheme={themeToggler} text=\"Switch Theme\" />\n          <Toggler toggleTheme={musicToggler} text=\"Toggle Music\" />\n        </TogglersContainer>\n        {hasNft ? (\n          <Arena />\n        ) : (\n          <ImageContainer>\n            <Image src={image} />\n          </ImageContainer>\n        )}\n\n        <BodyContainer>\n          {!hasNft && <Title> Let the games begin!</Title>}\n\n          {\n            // if there's no account connected it shows the button to connect one\n            // if there's an account and it has an NFT minted it shows the arena to battle, if it doesn't have one it shows the character selection\n            !currentAccount ? (\n              <Button onClick={connectWallet}>Connect your wallet!</Button>\n            ) : hasNft ? (\n              <></>\n            ) : (\n              <SelectCharacter />\n            )\n          }\n        </BodyContainer>\n      </Container>\n      <Sound url={music} playStatus={musicStatus} />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n\nconst Container = styled.div`\n  text-align: center;\n  padding: 0 0 1em;\n  min-height: 100vh;\n  background-color: ${({ theme }) => theme.background};\n  box-sizing: border-box;\n  transition: 0.6s;\n  position: relative;\n`;\n\nconst TogglersContainer = styled.div`\n  position: absolute;\n  display: flex;\n  width: 100%;\n  justify-content: space-between;\n`;\n\nconst BodyContainer = styled.div`\n  padding: 1em;\n`;\n\nconst Title = styled.h1`\n  text-align: center;\n  font-size: 2em;\n  padding: 0 0.3em;\n  color: ${({ theme }) => theme.text};\n  text-shadow: 1px 1px 15px ${({ theme }) => theme.text};\n  margin-top: 0;\n`;\n\nconst ImageContainer = styled.div`\n  max-height: 350px;\n  overflow-y: hidden;\n  margin: 0 0 2em;\n  box-shadow: 1px 1px 20px ${({ theme }) => theme.text};\n  border-radius: 5px;\n`;\n\nconst Image = styled.img`\n  width: 100%;\n  /* Avoid extra space below the image because of the default display inline */\n  display: flex;\n`;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { WalletContextProvider } from \"src/contexts\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <WalletContextProvider>\n      <App />\n    </WalletContextProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}